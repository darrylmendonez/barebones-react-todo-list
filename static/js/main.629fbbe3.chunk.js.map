{"version":3,"sources":["components/home.js","components/classComponent.js","components/functionComponent.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","exact","to","ClassComponent","props","handleChange","e","setState","currentItem","target","value","handleSubmit","preventDefault","newId","sortedListByIds","state","list","slice","sort","a","b","id","i","length","prevState","newItem","task","completed","localStorage","setItem","JSON","stringify","console","log","toggleCompleteStatus","map","item","deleteTask","filteredList","filter","localList","parse","getItem","this","fluid","xs","md","style","listStyleType","Fragment","key","onClick","textDecoration","onSubmit","type","onChange","Component","FunctionComponent","useState","setList","setCurrentItem","useEffect","prevList","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.629fbbe3.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst Home = () => {\n  return (\n    <ul>\n      <li>\n        <NavLink className='nav-link' exact to={'/class-component'}>\n          Class Component\n        </NavLink>\n      </li>\n      <li>\n        <NavLink className='nav-link' exact to={'/function-component'}>\n          Function Component\n        </NavLink>\n      </li>\n    </ul>\n  );\n}\n \nexport default Home;","import React, { Component } from 'react'\nimport { Grid, Row, Col } from 'react-flexbox-grid'\n\nclass ClassComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\n        {\n          id: 1,\n          task: 'Create tasks',\n          completed: false,\n        },\n        {\n          id: 2,\n          task: 'Read tasks',\n          completed: false,\n        },\n        {\n          id: 3,\n          task: 'Mark complete',\n          completed: false,\n        },\n        {\n          id: 4,\n          task: 'Delete tasks',\n          completed: false,\n        },\n      ],\n      currentItem: '',\n    }\n  }\n\n  componentDidMount() {\n    let localList = JSON.parse(localStorage.getItem('list'));\n    if (localList !== null) {\n      this.setState(() => {\n        return {\n          list: localList\n        }\n      })\n    }\n  }\n\n  handleChange = e => {\n    this.setState({currentItem: e.target.value})\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n\n    // generate an unused id\n    let newId = 1;\n    let sortedListByIds = this.state.list.slice().sort((a, b) => (a.id - b.id))\n    for (let i = 0; i < sortedListByIds.length; i++) {\n      if (newId === sortedListByIds[i].id) {\n        newId++\n      }\n    }\n    this.setState(prevState => {\n      const newItem = {\n        id: newId,\n        task: prevState.currentItem,\n        completed: false,\n      }\n      return {\n        list: [...prevState.list, newItem],\n        currentItem: '',\n      }\n    }, () => {\n      localStorage.setItem('list', JSON.stringify(this.state.list))\n      console.log('state: ', this.state)\n    })\n  }\n\n  toggleCompleteStatus = id => {\n    this.setState(() => {\n      return {\n        list: this.state.list.map( item => item.id === id ? {...item, completed: !item.completed} : item)\n      }\n    }, () => {\n      localStorage.setItem('list', JSON.stringify(this.state.list))\n    })\n  }\n\n  deleteTask = id => {\n    let filteredList = this.state.list.filter( item => item.id !== id)\n    this.setState({\n      list: [...filteredList]\n    }, () => {\n      localStorage.setItem('list', JSON.stringify(this.state.list))\n    })\n  }\n\n  render() {\n    return (\n      <Grid fluid>\n        <Row>\n          <Col xs={6} md={3}>\n            <h3>Things to do:</h3>\n            <ul style={{listStyleType: 'none'}}>\n              {this.state.list.length ? (\n                this.state.list.map( item => (\n                  <React.Fragment key={item.id}>\n                    <li onClick={() => this.toggleCompleteStatus(item.id)} style={{textDecoration: item.completed ? 'line-through' : 'none'}}>\n                      {item.task}\n                    </li> <button onClick={() => this.deleteTask(item.id)}>x</button>\n                  </React.Fragment>\n                ))\n              ) : (\n                null\n              )}\n            </ul>\n          </Col>\n          <Col xs={6} md={6}>\n            <h4>Add item:</h4>\n            <form onSubmit={this.handleSubmit}>\n              <input type=\"text\" value={this.state.currentItem} onChange={this.handleChange} />\n            </form>\n          </Col>\n        </Row>\n      </Grid>\n    );\n  }\n}\n \nexport default ClassComponent;","import React, { useState, useEffect } from 'react'\nimport { Grid, Row, Col } from 'react-flexbox-grid'\n\nconst FunctionComponent = () => {\n  const [list, setList] = useState(\n    [\n      {\n        id: 1,\n        task: 'Create tasks',\n        completed: false,\n      },\n      {\n        id: 2,\n        task: 'Read tasks',\n        completed: false,\n      },\n      {\n        id: 3,\n        task: 'Mark complete',\n        completed: false,\n      },\n      {\n        id: 4,\n        task: 'Delete tasks',\n        completed: false,\n      },\n    ],\n  )\n  const [currentItem, setCurrentItem] = useState('')\n\n  useEffect(() => {\n    let localList = JSON.parse(localStorage.getItem('list'));\n    if (localList !== null) {\n      setList(localList)\n    }\n  }, []) // empty array as second argument will behave exaclty like componentDidMount\n\n  const handleChange = e => {\n    setCurrentItem(e.target.value)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    // generate an unused id\n    let newId = 1;\n    let sortedListByIds = list.slice().sort((a, b) => (a.id - b.id))\n    for (let i = 0; i < sortedListByIds.length; i++) {\n      if (newId === sortedListByIds[i].id) {\n        newId++\n      }\n    }\n    setList(prevList => {\n      const newItem = {\n        id: newId,\n        task: currentItem,\n        completed: false,\n      }\n      return [...prevList, newItem]\n    })\n    setCurrentItem('')\n  }\n\n  const toggleCompleteStatus = id => {\n    setList(list.map( item => item.id === id ? {...item, completed: !item.completed} : item))\n  }\n\n  const deleteTask = id => {\n    let filteredList = list.filter( item => item.id !== id)\n    setList([...filteredList])\n  }\n\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify(list))\n  }, [list])\n\n  return (\n    <Grid fluid>\n      <Row>\n        <Col xs={6} md={3}>\n          <h3>Things to do:</h3>\n          <ul style={{listStyleType: 'none'}}>\n            {list.length ? (\n              list.map( item => (\n                <React.Fragment key={item.id}>\n                  <li onClick={() => toggleCompleteStatus(item.id)} style={{textDecoration: item.completed ? 'line-through' : 'none'}}>\n                    {item.task}\n                  </li> <button onClick={() => deleteTask(item.id)}>x</button>\n                </React.Fragment>\n              ))\n            ) : (\n              null\n            )}\n          </ul>\n        </Col>\n        <Col xs={6} md={6}>\n          <h4>Add task:</h4>\n          <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={currentItem} onChange={handleChange} />\n          </form>\n        </Col>\n      </Row>\n    </Grid>\n  );\n}\n \nexport default FunctionComponent;","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport Home from './components/home'\nimport ClassComponent from './components/classComponent'\nimport FunctionComponent from './components/functionComponent'\nimport './App.css';\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/class-component' component={ClassComponent} />\n          <Route path='/function-component' component={FunctionComponent} />\n        </Switch>\n      </div>\n    </HashRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}